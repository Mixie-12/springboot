name: Build, Push & Deploy to GKE

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: {}

permissions:
  contents: read
  id-token: write

env:
  REGION: ${{ vars.REGION || 'europe-north1' }}
  GAR_REPO: ${{ vars.GAR_REPO || 'spring-demo' }}
  IMAGE_NAME: ${{ vars.IMAGE_NAME || 'demo' }}

  # --- K8s/GKE deploy settings (override via Repository Variables) ---
  GKE_CLUSTER: ${{ vars.GKE_CLUSTER || 'my-gke-cluster' }}
  GKE_LOCATION: ${{ vars.GKE_LOCATION || 'europe-north1' }} # zone or region
  K8S_NAMESPACE: ${{ vars.K8S_NAMESPACE || 'default' }}
  DEPLOYMENT_NAME: ${{ vars.DEPLOYMENT_NAME || 'demo' }}    # k8s Deployment name
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME || 'demo' }}      # container name inside the Deployment

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: ðŸ”Ž Check secrets presence
        run: |
          echo "WIF_PROVIDER set? ${{ secrets.GCP_WIF_PROVIDER != '' }}"
          echo "SA_EMAIL set?     ${{ secrets.GCP_SA_EMAIL != '' }}"
          echo "PROJECT_ID set?   ${{ secrets.GCP_PROJECT_ID != '' }}"

      # If your Dockerfile expects a built JAR in target/, build it first.
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Build JAR (skip tests)
        run: mvn -B -DskipTests package

      - name: Auth to GCP (OIDC/WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GAR
        run: gcloud auth configure-docker "${{ env.REGION }}-docker.pkg.dev" --quiet

      - name: Build image
        run: |
          IMAGE_BASE="${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.GAR_REPO }}/${{ env.IMAGE_NAME }}"
          GIT_SHA="${{ github.sha }}"
          docker build -t "$IMAGE_BASE:$GIT_SHA" -t "$IMAGE_BASE:latest" -f Dockerfile .
          echo "IMAGE=$IMAGE_BASE:$GIT_SHA" >> $GITHUB_ENV
          echo "IMAGE_LATEST=$IMAGE_BASE:latest" >> $GITHUB_ENV

      - name: Push image
        run: |
          docker push "$IMAGE"
          docker push "$IMAGE_LATEST"

      # ---- KUBERNETES REDEPLOY ----
      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_LOCATION }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to Kubernetes (set image to new SHA)
        env:
          IMAGE: ${{ env.IMAGE }}
          K8S_NAMESPACE: ${{ env.K8S_NAMESPACE }}
          DEPLOYMENT_NAME: ${{ env.DEPLOYMENT_NAME }}
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
        run: |
          # Update the Deployment to use the freshly-pushed SHA-tagged image
          kubectl -n "$K8S_NAMESPACE" set image deployment/"$DEPLOYMENT_NAME" "$CONTAINER_NAME"="$IMAGE" --record
          # Wait for rollout to complete (fail the job if it doesn't)
          kubectl -n "$K8S_NAMESPACE" rollout status deployment/"$DEPLOYMENT_NAME" --timeout=5m

      - name: Done
        run: |
          echo "Pushed $IMAGE and $IMAGE_LATEST"
          echo "Updated deployment '${{ env.DEPLOYMENT_NAME }}' in '${{ env.K8S_NAMESPACE }}' to image: $IMAGE"
